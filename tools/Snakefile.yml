etissue_cat_ods = config['etissue_cat_ods']
gwas_cat_ods = config['gwas_cat_ods']
outdir = config['outdir']
david_email = config['david_email']
public_data_dir_path = config['public_data_dir']
coloc_tsv_gz = config['coloc_tsv_gz']
upper_var_gwas_cat_count = config['upper_var_gwas_cat_count']

rule all2:
    input:
        os.path.join(outdir, "web/db.sqlite"),

rule all:
    input:
        os.path.join(outdir, "cmpt_count_per_rsid.py/count_per_rsid_gwas.tsv"),
        os.path.join(outdir, "cmpt_pleiotropic_regions.py/region_window_100000.tsv"),
        os.path.join(outdir, "cmpt_pleiotropic_regions.py/regions_100000_length_hist.png"),
        os.path.join(outdir, "intrsct_remap_nr_gwas_categories.py/remap_nr_variant_pleio_1_flank_0_hg38.bed"),
        os.path.join(outdir, "intrsct_remap_nr_gwas_categories.py/remap_nr_variant_pleio_1_flank_50_hg38.bed"),
        os.path.join(outdir, "pltbox_x_per_rsid_y_remaptf.py/bxplt_remaptf_per_rsid_flank_0.png"),
        os.path.join(outdir, "pltbox_x_per_rsid_y_remaptf.py/bxplt_remaptf_per_rsid_flank_50.png"),
        os.path.join(outdir, "pltsctr_x_per_rsid_y_egene.py/log.txt"),
        os.path.join(outdir, "pltsctr_x_per_rsid_y_etissue.py/log.txt"),
        os.path.join(outdir, "pltsctr_x_per_rsid_y_gwas.py/log.txt"),
        os.path.join(outdir, "plt_vep_consequence.py/missense_variant.png"),
        os.path.join(outdir, "pltbox_x_per_gwas_cat_y_beta.py/eqtl_beta.png"),
        os.path.join(outdir, "pltbox_x_per_gwas_cat_y_beta.py/gwas_beta.png"),
        os.path.join(outdir, "plt_violin_x_per_region_y_egenes.py/vlnplt.png"),
        os.path.join(outdir, "plt_violin_x_per_egene_y_interactors.py/vlnplt.png"),
        os.path.join(outdir, "pltbox_x_per_variant_y_egene.py/plt.png"),
        os.path.join(outdir, "pltbox_x_per_variant_egene_y_etissue.py/plt.png"),
        os.path.join(outdir, "pltbox_x_per_variant_egene_etissue_y_gwas.py/plt.png"),
        os.path.join(outdir, "pltbox_x_per_gwas_cat_y_logpval.py/eqtl.png"),
        os.path.join(outdir, "pltbox_x_per_gwas_cat_y_logpval.py/gwas.png"),
        os.path.join(outdir, "plthst_gwas_egene_etissue.py/hist_egene.png"),
        os.path.join(outdir, "plthst_gwas_egene_etissue.py/hist_etissue.png"),
        os.path.join(outdir, "plthst_gwas_egene_etissue.py/hist_gwas.png"),
        os.path.join(outdir, "pltvln_egene_etissue_freq_per_gwas_cat.py/violinplot_gwas_egene.png"),
        os.path.join(outdir, "pltvln_egene_etissue_freq_per_gwas_cat.py/violinplot_gwas_etissue.png"),
        os.path.join(outdir, "annot_gwas_metadata.py/gwas413_metadata.tsv"),
        os.path.join(outdir, "cmpt_davidgo.py/david_pleio_2.tsv"),
        os.path.join(outdir, "pltbar_davidgo.py/david_pleio_2.png"),
        os.path.join(outdir, "web/db.sqlite"),

include: 'Snakefile_plots.yml'

rule intrsct_remap_nr_gwas_categories:
    input:
        os.path.join(outdir, "cmpt_count_per_rsid.py/count_per_rsid_gwas.tsv"),
        os.path.join(outdir, "cmpt_count_per_rsid.py/variant_pleio_1_flank_0_hg38.bed"),
        os.path.join(outdir, "cmpt_count_per_rsid.py/variant_pleio_1_flank_50_hg38.bed"),
        os.path.join(public_data_dir_path, "remap.univ-amu.fr/storage/remap2022/hg38/MACS2/remap2022_nr_macs2_hg38_v1_0.bed.gz"),
    output:
        os.path.join(outdir, "intrsct_remap_nr_gwas_categories.py/remap_nr_variant_pleio_1_flank_0_hg38.bed"),
        os.path.join(outdir, "intrsct_remap_nr_gwas_categories.py/remap_nr_variant_pleio_1_flank_50_hg38.bed"),
    params:
        upper_var_gwas_cat_count=upper_var_gwas_cat_count
    shell:
        "python scripts/intrsct_remap_nr_gwas_categories.py {input[0]} {input[1]} {input[2]} {params.upper_var_gwas_cat_count} {output[0]} {output[1]}"

rule cmpt_vep_consequence_fisher:
    input:
        os.path.join(outdir, "cmpt_vep.py/vep_input.tsv"),
        os.path.join(outdir, "cmpt_vep.py/vep_output.tsv"),
    output:
        os.path.join(outdir, "cmpt_vep_consequence_fisher.py/cons_stat.tsv"),
    params:
        upper_var_gwas_cat_count=upper_var_gwas_cat_count
    shell:
        "python scripts/cmpt_vep_consequence_fisher.py {input[0]} {input[1]} {params.upper_var_gwas_cat_count} {output[0]}"

rule cmpt_vep:
    input:
        os.path.join(outdir, "filter_h4.py/h4.tsv"),
        os.path.join(outdir, "cmpt_count_per_rsid.py/count_per_rsid_gwas.tsv"),
    output:
        os.path.join(outdir, "cmpt_vep.py/vep_input.tsv"),
        os.path.join(outdir, "cmpt_vep.py/vep_output.tsv"),
    params:
        upper_var_gwas_cat_count=upper_var_gwas_cat_count
    shell:
        "python scripts/cmpt_vep.py {input[0]} {input[1]} {params.upper_var_gwas_cat_count} {output[0]} {output[1]}"

rule cmpt_pleiotropic_regions:
    input:
        gwas=os.path.join(outdir, "cmpt_count_per_rsid.py/count_per_rsid_gwas.tsv"),
    output:
        os.path.join(outdir, "cmpt_pleiotropic_regions.py/region_window_100000.tsv"),
        os.path.join(outdir, "cmpt_pleiotropic_regions.py/regions_100000_length_hist.png"),
        os.path.join(outdir, "cmpt_pleiotropic_regions.py/region_window_100000.bed"),
    shell:
        "python scripts/cmpt_pleiotropic_regions.py {input.gwas} {output[0]} {output[1]}"

rule pltbar_davidgo:
    input:
        os.path.join(outdir, "cmpt_davidgo.py/david_pleio_2.tsv"),
    output:
        os.path.join(outdir, "pltbar_davidgo.py/david_pleio_2.png"),
    params:
        upper_var_gwas_cat_count,
        os.path.join(outdir, "cmpt_davidgo.py/david_pleio"),
        os.path.join(outdir, "pltbar_davidgo.py/david_pleio"),
    shell:
        "python scripts/pltbar_davidgo.py {params[1]} {params[0]} {params[2]}"

rule cmpt_davidgo:
    input:
        os.path.join(outdir, "cmpt_count_per_rsid.py/count_per_rsid_gwas_egene_etissue.tsv"),
    output:
        os.path.join(outdir, "cmpt_davidgo.py/david_pleio_2.tsv"),
    params:
        david_email,
        upper_var_gwas_cat_count,
        os.path.join(outdir, "cmpt_davidgo.py/david_pleio"),
    shell:
        "python scripts/cmpt_davidgo.py {input[0]} {params[0]} {params[1]} {params[2]}"

rule count_per_rsid:
    input:
        tsv=os.path.join(outdir, "filter_h4.py/h4.tsv"),
    output:
        os.path.join(outdir, "cmpt_count_per_rsid.py/count_per_rsid_gwas.tsv"),
        os.path.join(outdir, "cmpt_count_per_rsid.py/count_per_rsid_egene.tsv"),
        os.path.join(outdir, "cmpt_count_per_rsid.py/count_per_rsid_etissue.tsv"),
        os.path.join(outdir, "cmpt_count_per_rsid.py/variant_pleio_1_flank_0_hg38.bed"),
        os.path.join(outdir, "cmpt_count_per_rsid.py/variant_pleio_1_flank_50_hg38.bed"),
        os.path.join(outdir, "cmpt_count_per_rsid.py/count_per_rsid_gwas_egene_etissue.tsv"),
    params:
        upper_var_gwas_cat_count=upper_var_gwas_cat_count
    shell:
        "python scripts/cmpt_count_per_rsid.py {input.tsv} {params.upper_var_gwas_cat_count} {output[0]}"

rule filter_h4:
    input:
        os.path.join(outdir, "annotate.py/annotated.tsv.gz"),
    output:
        os.path.join(outdir, "filter_h4.py/h4.tsv"),
    shell:
        "python scripts/filter_h4.py {input[0]} {output[0]}"

rule web_db:
    input:
        os.path.join(outdir, "annotate.py/annotated.tsv.gz"),
    output:
        os.path.join(outdir, "web/db.sqlite"),
    shell:
        """
        sqlite3 {output[0]} 'create table eqtl2gwas (id INTEGER PRIMARY KEY AUTOINCREMENT, chrom INTEGER, pos INTEGER, cytoband TEXT, rsid TEXT, ref TEXT, alt TEXT, egene TEXT, egene_symbol TEXT, eqtl_beta REAL, eqtl_pvalue REAL, eqtl_identifier TEXT, etissue_category TEXT, gwas_beta REAL, gwas_pvalue REAL, gwas_identifier TEXT, gwas_trait TEXT, gwas_category TEXT, "SNP_PP_H4" REAL, "PP_H4_abf" REAL, coloc_window TEXT, nsnps INTEGER, "PP_H3_abf" REAL, "PP_H2_abf" REAL, "PP_H1_abf" REAL, "PP_H0_abf" REAL);'
        gunzip -c {input[0]} |sqlite3 -csv -separator $'\t' {output[0]} '.import --skip 1 /dev/stdin eqtl2gwas'
        """

rule annotate:
    input:
        coloc_tsv_gz,
        gwas_cat_ods,
        etissue_cat_ods,
    output:
        os.path.join(outdir, "annotate.py/annotated.tsv.gz"),
    params:
        pp_h4_abf=0.1,
    shell:
        "python scripts/annotate.py {params.pp_h4_abf} {input[0]} {input[1]} {input[2]} {output[0]}"

rule annot_gwas_metadata:
    input:
        "config/gwas413.ods",
    output:
        os.path.join(outdir, "annot_gwas_metadata.py/gwas413_metadata.tsv"),
    shell:
        "python scripts/annot_gwas_metadata.py {input[0]} {output[0]}"

rule wget_remap:
    output:
        os.path.join(public_data_dir_path, "remap.univ-amu.fr/storage/remap2022/hg38/MACS2/remap2022_nr_macs2_hg38_v1_0.bed.gz"),
    params:
        url="remap.univ-amu.fr/storage/remap2022/hg38/MACS2/remap2022_nr_macs2_hg38_v1_0.bed.gz",
        public_data_dir_path=public_data_dir_path,
    shell:
        """wget -nc -q -r {params.url} -P {params.public_data_dir_path}"""

rule wget_interactome:
    output:
        os.path.join(public_data_dir_path, "stringdb-static.org/download/protein.physical.links.v11.5/9606.protein.physical.links.v11.5.txt.gz"),
    params:
        url="stringdb-static.org/download/protein.physical.links.v11.5/9606.protein.physical.links.v11.5.txt.gz",
        public_data_dir_path=public_data_dir_path,
    shell:
        """wget -nc -q -r {params.url} -P {params.public_data_dir_path}"""

